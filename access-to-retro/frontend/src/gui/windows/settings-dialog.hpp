/**
 * @file gui/windows/settings-dialog.hpp
 */

#ifndef AR_GUI_SETTINGS_WINDOW_H
#define AR_GUI_SETTINGS_WINDOW_H

#include <QAbstractButton>
#include <functional>
#include <QDialog>
#include "util/settings-manager.hpp"

// TODO Fix layouts margins

namespace ar::gui
{
    namespace Ui
    {
        class settings_dialog;
    }

    /// @brief Window where you can change settings of the application
    class settings_dialog : public QDialog
    {
    Q_OBJECT

    public:
        /**
         * @brief Default constructor
         * @param parent Qt's parent window
         */
        explicit settings_dialog(QWidget* parent = nullptr);
        ~settings_dialog() override;

        // ****************** Qt's Slot Methods ******************
    private slots:
        // ****************** Developer Tab ******************

        /// @brief Runs when item inside priority combo box changes
        void on_priority_combo_box_currentTextChanged(const QString&);

        /// @brief Runs when item inside verbosity combo box changes
        void on_verbosity_combo_box_currentTextChanged(const QString&);

        /// @brief Runs when browse button (virtual consoles path)
        void on_vc_path_browse_button_clicked();

        // ****************** Graphics Tab ******************

        /// @brief Runs when item inside rendering combo box changes
        void on_rendering_combo_box_currentIndexChanged(int index);

        // ****************** General Tab ******************

        /// @brief Runs when browse button (roms path)
        void on_rom_path_browse_button_clicked();

        /// @brief Runs when the button box on the bottom of the screen is clicked
        void on_bottom_button_box_clicked(QAbstractButton* clicked_button);

        /// @brief Runs when item inside default tab combo box changes
        void on_default_source_tab_combo_box_currentIndexChanged(int index);

        /// @brief Runs when 'show all systems' checkbox is checked
        void on_show_all_systems_checkbox_stateChanged(int arg);

    private:
        /// @brief Global Settings manager object
        std::shared_ptr<ar::util::settings_manager> _settings_manager;

        /// @brief Whether Ui has been completely constructed or not
        bool _ui_created = false;

        /// @brief Qt's autogenerated Ui
        Ui::settings_dialog* ui;

        // ****************** Ui Populating Methods ******************

        /// @brief Populate combo boxed with data
        void populate_combo_boxes();

        /// @brief Populate path line edits with data
        void populate_paths();

        /// @brief Populate checkboxes with checked/unchecked
        void populate_checkboxes();
    };
}

#endif // AR_GUI_SETTINGS_WINDOW_H
