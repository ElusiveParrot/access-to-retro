/**
 * @file gui/windows/manager-dialog.hpp
 */

#include <vector>
#include <memory>
#include "core/executable-binary.hpp"
#include "core/virtual-console.hpp"
#include "util/settings-manager.hpp"

#ifndef AR_GUI_MANAGER_DIALOG_HPP
#define AR_GUI_MANAGER_DIALOG_HPP

#include <QDialog>

namespace ar::gui
{

    namespace Ui
    {
        class manager_dialog;
    }

    /// @brief Window where you can install/uninstall games/virtual consoles
    class manager_dialog : public QDialog
    {
    Q_OBJECT

    public:
        /**
         * @brief Default constructor
         * @param virtual_consoles Reference to the vector containing virtual consoles owned by main window
         * @param games Reference to the vector containing games owned by main window
         * @param parent Qt's parent window
         */
        explicit manager_dialog(
                std::vector<std::unique_ptr<ar::core::virtual_console> >& virtual_consoles,
                std::vector<std::unique_ptr<ar::core::executable_binary> >& games,
                std::function<void()> on_change_fn, QWidget* parent = nullptr);
        ~manager_dialog() override;

        // ****************** Qt's Slot Methods ******************
    private slots:
        /// @brief Runs when button to delete selected game is clicked
        void on_delete_selected_game_button_clicked();

        /// @brief Runs when button to delete selected virtual console is clicked
        void on_delete_selected_vc_button_clicked();

        /// @brief Runs when button to install new game is clicked
        void on_install_new_game_button_clicked();

        /// @brief Runs when button to install new virtual console is clicked
        void on_install_new_vc_button_clicked();

    private:
        /// @brief Global Settings manager object
        std::shared_ptr<ar::util::settings_manager> _settings_manager;

        /// @brief This function will get called whenever a game/virtual console is deleted/added
        std::function<void()> _on_change_fn;

        /// @brief
        std::vector<std::unique_ptr<ar::core::virtual_console> >& _virtual_consoles_ref;

        /// @brief
        std::vector<std::unique_ptr<ar::core::executable_binary> >& _games_ref;

        /// @brief Qt's autogenerated Ui
        Ui::manager_dialog* ui;

        // ****************** Ui Populating Methods ******************

        /// @brief Populate virtual console and game lists with provided references
        void populate_lists();
    };
}

#endif // AR_GUI_MANAGER_DIALOG_HPP
