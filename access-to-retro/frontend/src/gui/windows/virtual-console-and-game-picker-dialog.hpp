/**
 * @file gui/windows/virtual-console-and-game-picker-dialog.hpp
 */

#ifndef AR_GUI_VIRTUALCONSOLEAND_GAMEPICKER_DIALOG_H
#define AR_GUI_VIRTUALCONSOLEAND_GAMEPICKER_DIALOG_H

#include <QDialog>
#include <vector>
#include "core/executable-binary.hpp"
#include "core/virtual-console.hpp"

namespace ar::gui
{
    namespace Ui
    {
        class virtual_console_and_game_picker_dialog;
    }

    /// @brief Shown after clicking a system or a game, allows the user to pick virtual console and/or game
    class virtual_console_and_game_picker_dialog : public QDialog
    {
    Q_OBJECT

    public:
        /**
         * @brief Default constructor
         * @param associated_virtual_consoles Virtual consoles associated with that system/game
         * @param associated_games Games associated with that system
         * @param hide_games Hide game selection, used for when launching through games tab
         * @param parent Qt's parent window
         */
        explicit virtual_console_and_game_picker_dialog(
                std::vector<std::reference_wrapper<std::unique_ptr<ar::core::virtual_console> > >
                associated_virtual_consoles,
                std::vector<std::reference_wrapper<std::unique_ptr<ar::core::executable_binary> > >
                associated_games,
                bool hide_games, QWidget* parent = nullptr);
        ~virtual_console_and_game_picker_dialog() override;

        // ****************** Qt's Slot Methods ******************
    private slots:
        /// @brief Override 'Ok' button behaviour
        void accept() override;

    private:
        /// @brief Virtual consoles associated with that system/game
        std::vector<std::reference_wrapper<std::unique_ptr<ar::core::virtual_console> > > _associated_virtual_consoles;

        /// @brief Games associated with that system
        std::vector<std::reference_wrapper<std::unique_ptr<ar::core::executable_binary> > > _associated_games;

        /// @brief Qt's autogenerated Ui
        Ui::virtual_console_and_game_picker_dialog* ui;

        /**
         * @brief Launch virtual console window with selected virtual console and game
         * @param virtual_console Selected virtual console
         * @param game Selected game
         */
        void launch_virtual_console_with_game(std::unique_ptr<ar::core::virtual_console>& virtual_console,
                                              std::unique_ptr<ar::core::executable_binary>& game);

        // ****************** Ui Populating Methods ******************

        /// @brief Populate game selection list
        void populate_games_selection();

        /// @brief Populate virtual consoles selection list
        void populate_virtual_consoles_selection();
    };
}

#endif // AR_GUI_VIRTUALCONSOLEAND_GAMEPICKER_DIALOG_H
