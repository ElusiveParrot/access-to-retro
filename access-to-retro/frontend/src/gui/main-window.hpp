/**
 * @file gui/main-window.hpp
 */

#ifndef ACCESS_TO_RETRO_FRONTEND_MAIN_WINDOW_HPP
#define ACCESS_TO_RETRO_FRONTEND_MAIN_WINDOW_HPP

#include <QListWidgetItem>
#include <QMainWindow>
#include <memory>
#include <vector>
#include "core/executable-binary.hpp"
#include "core/virtual-console.hpp"
#include "util/settings-manager.hpp"

/// @brief Contains Qt's GUI classes
namespace ar::gui
{
    // Qt's autogenerated for .ui
    namespace Ui
    {
        class main_window;
    }

    // TODO: Make it so all windows exit when this window does

    /// @brief Main window/landing page of the application, shown after the splash screen.
    class main_window : public QMainWindow
    {
    Q_OBJECT

    public:
        explicit main_window(QWidget* parent = nullptr);
        ~main_window() override;

        // ****************** Qt's Slot Methods ******************
    private slots:
        // ****************** Menubar buttons ******************

        // TODO: Add Install Game / Install Virtual Console button that copiees selected file to path

        /// @brief Runs when settings button in menubar is clicked
        void on_settings_button_clicked();

        /// @brief Runs when manager button in menubar is clicked
        void on_manager_button_clicked();

        /// @brief Runs when input button in menubar is clicked
        void on_input_button_clicked();

        /// @brief Runs when refresh button in menubar is clicked
        void on_refresh_button_clicked();

        /// @brief Runs when about button in menubar is clicked
        void on_about_button_clicked();

        /// @brief Runs when search button is clicked on games tab
        void on_games_search_button_clicked();

        /// @brief Runs when clear filter button is clicked on games tab
        void on_games_search_clear_filter_button_clicked();

        /// @brief Runs when user clicks a game on game list
        void on_games_list_currentItemChanged(QListWidgetItem* item);

    private:
        /// @brief Global settings manager object fetched as a pointer
        std::shared_ptr<ar::util::settings_manager> _settings_manager;

        /// @brief Stores loaded virtual consoles
        std::vector<std::unique_ptr<ar::core::virtual_console> > _virtual_consoles;

        /// @brief Stores loaded games
        std::vector<std::unique_ptr<ar::core::executable_binary> > _games;

        /// @brief Qt's autogenerated Ui
        Ui::main_window* ui;

        /// @brief Searches for virtual consoles and loads them into '_virtual_consoles' vector
        void load_virtual_consoles();

        /// @brief Searches for games and loads them into '_games' vector
        void load_games();

        /**
         * @brief Checks whether first time setup and returns if it needed
         * @return If first time setup is needed
         */
        bool is_first_time_setup_needed();

        /**
         * @brief Helper method to get a list of games that have one of provided extensions
         * @param extensions List of extensions
         * @return List of games with provided extensions
         */
        std::vector<std::reference_wrapper<std::unique_ptr<ar::core::executable_binary> > >
        collect_games_with_extensions(const std::vector<std::string>& extensions);

        /// @bief Runs when a system button (game console system) is clicked
        void system_selected();

        // ****************** Ui Populating Methods ******************

        /// @brief Populate systems tab with UI elements
        void populate_systems_tab();

        /**
         * @brief Populate games tab with UI elements
         * @param filter
         */
        void populate_games_tab(const std::string& filter = "");
    };
}

#endif // ACCESS_TO_RETRO_FRONTEND_MAIN_WINDOW_HPP
